import { isInEnum } from '../utils/inEnum';
import { Topics } from '../enums/topic.enum';
import { identity } from '../services/identity.service';
import { note } from '../services/note.service';

export default {
    name: 'save',
    async execute(ctx: any) {
        try {
            const noteText = ctx.message.text.replace(/^!save/i, '');
            const userId = ctx.from.id;

            const topicId = ctx.message.is_topic_message
                ? ctx.message.message_thread_id
                : undefined;
            const noteType = Topics[topicId];
            if (isInEnum(topicId, Topics) && noteType) {
                const Identity = await identity.getByUserId(userId);
                if (!Identity) {
                    return await ctx.reply(
                        '·Äû·ÄÑ·Ä∫·Ä∑·Äõ·Ä≤·Ä∑ account ·Äû·Ää·Ä∫ Entrance Form ·Äô·Äñ·Äº·Ää·Ä∫·Ä∑·Äï·Ä≤ telegram group ·Äë·Ä≤ join ·Äë·Ä¨·Ä∏ ·Äû·Ä±·Ä¨ account ·Äñ·Äº·ÄÖ·Ä∫·Äû·Äñ·Äº·ÄÑ·Ä∫·Ä∑ save ·Åç·Äô·Äõ·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Åã',
                        {
                            reply_to_message_id: ctx.message.message_id,
                        }
                    );
                }
                await note.create({
                    accountId: Identity._id,
                    type: noteType,
                    note: noteText,
                    attachment: [],
                    isAnonymous: false,
                });
                ctx.react('üëå');
            }
        } catch (error) {
            throw new Error(
                'Error while saving message by command : \n\n' + error
            );
        }
    },
};
